<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>校园网优化-第一篇-了解校园网</title>
    <link href="/2022/04/02/school-net-1/"/>
    <url>/2022/04/02/school-net-1/</url>
    
    <content type="html"><![CDATA[<h2 id="一、你需要了解"><a href="#一、你需要了解" class="headerlink" title="一、你需要了解"></a>一、你需要了解</h2><ul><li>校园网的工作原理<ol><li>如何验证用户身份</li><li><strong>怎么判断终端是手机还是PC</strong></li><li>如何给用户提供网络</li></ol></li></ul><h2 id="二、如何验证用户身份"><a href="#二、如何验证用户身份" class="headerlink" title="二、如何验证用户身份"></a>二、如何验证用户身份</h2><ul><li><p>网上有很多介绍如何<a href="https://search.bilibili.com/all?keyword=%E8%87%AA%E5%8A%A8%E7%99%BB%E5%BD%95%E6%A0%A1%E5%9B%AD%E7%BD%91">自动登录校园网</a>的，在此只随口提一句</p><ol><li><p>如果你之前看过我关于Tasker的教程，那就应该了解一点HttpRequest的理论</p></li><li><p>验证，顾名思义就是向服务器发送能证明你身份的数据</p></li><li><p>向服务器发送数据是不难的，网上的各种方法都是在教大家如何获取到这段数据</p><p>这里是用FireFox自带的网络抓包功能获取到的Http请求</p><p><img src="/img/school-net-1/login.jpg"></p></li></ol></li><li><p>请求过程非常草率2333，在GET语句中-账号密码全部明文上传</p></li><li><p>想要自动登录，只要在连上校园网的一刻，自动向服务器发送这条GET请求即可</p></li></ul><h2 id="三、服务端怎么判断终端是手机还是PC"><a href="#三、服务端怎么判断终端是手机还是PC" class="headerlink" title="三、服务端怎么判断终端是手机还是PC"></a>三、服务端怎么判断终端是手机还是PC</h2><ul><li><p>又要提到上文中的GET请求了，细看GET请求中，有一条<code>User-Agent</code>，也就是大家在使用浏览器时可能见过的-UA选项</p></li><li><p>UA选项能让手机从移动端的页面转为桌面端，就是让服务器认为你是在用电脑浏览器访问，因而变更向你展示页面的格式</p></li><li><p>所以，通过修改UA我们就能达到一个账号同时支持两台PC或两台移动端访问</p></li><li><p>（博主的校园网只支持最多一台PC和一台移动设备访问）</p><p><img src="/img/school-net-1/useragent.jpg"></p></li></ul><h2 id="四、如何给用户提供网络"><a href="#四、如何给用户提供网络" class="headerlink" title="四、如何给用户提供网络"></a>四、如何给用户提供网络</h2><ul><li>校园网服务器在用户通过验证后向用户分配一个IP地址</li><li>这个IP是不固定的，由校园网当前的使用人数决定</li><li>根据GET请求中@符号后的代码来判断你的账号是哪家运营商</li><li>验证过后就为你接入对应的网络线路</li></ul><h2 id="五、待续"><a href="#五、待续" class="headerlink" title="五、待续"></a>五、待续</h2><ul><li>在之后的篇幅中会向大家介绍各种进阶调教方案<ol><li>单账号全寝室上网</li><li>多账号速度叠加上网</li><li>搭建寝室专用服务器</li><li>接入NAS设备，为寝室提供云存储方案</li><li>利用旁路由方案提升上网速度，屏蔽广告，<del>走向世界</del></li></ol></li><li>有任何问题或个人见解，请于评论区留言，我会收到邮件并回复你</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>硬件</tag>
      
      <tag>网络</tag>
      
      <tag>抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>机器人框架</title>
    <link href="/2022/01/27/OneBot/"/>
    <url>/2022/01/27/OneBot/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">    WARNING<br>    QQ机器人正被腾讯大力风控，不要使用新注册的账号运行机器人</p><h2 id="什么是OneBot-标准？"><a href="#什么是OneBot-标准？" class="headerlink" title="什么是OneBot 标准？"></a>什么是OneBot 标准？</h2><ul><li><a href="https://12.onebot.dev/">OneBot</a>标准是对开发聊天机器人所使用的 API 的一个抽象，是对聊天机器人 API  的通信方式、传输的数据格式和字段等的一个标准化定义。如果将 OneBot 标准类比于 C 语言、ECMAScript、POSIX 标准等，则  OneBot 实现对应 GCC、Chrome V8、Linux 等。</li><li>OneBot 标准由 OneBotRPC 和接口定义两部分组成:<ol><li>OneBotRPC 规定了 OneBot 应用与 OneBot 实现之间通过网络交互所使用的通信方式和数据协议</li><li>接口定义描述了一组标准事件、动作、消息段和它们的扩展规则</li></ol></li></ul><h2 id="听起来好像很复杂？"><a href="#听起来好像很复杂？" class="headerlink" title="听起来好像很复杂？"></a>听起来好像很复杂？</h2><ul><li>事实上，如果单作为使用者，我们不需要了解开发标准</li><li>本次搭建中，我们用到了两个开源项目<ol><li><a href="https://github.com/Mrs4s/go-cqhttp">Mrs4s/go-cqhttp</a></li><li><a href="https://github.com/FloatTech/ZeroBot-Plugin">FloatTech/ZeroBot-Plugin</a></li></ol></li><li>你可以理解为：cqhttp通过 HTTP 或 WebSocket 对 QQ事件进行上报以及接收请求来调用zerobot的接口</li></ul><h2 id="开始部署"><a href="#开始部署" class="headerlink" title="开始部署"></a>开始部署</h2><ul><li><p>环境：Ubuntu Server 20.04.3 LTS (GNU/Linux 5.4.0-96-generic x86_64)即<code>amd64</code></p><p>（由Releases看来，cqhttp及zerobot支持全平台）如果你想自己构建，则需要安装完整golang环境</p></li></ul><h4 id="1-下载可执行文件"><a href="#1-下载可执行文件" class="headerlink" title="1.下载可执行文件"></a>1.下载可执行文件</h4><ul><li><p>无论在什么系统下，我都建议你做好文件分类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir onebot<br><span class="hljs-meta">#</span><span class="bash">新建onebot主目录</span><br><br>cd onebot<br><span class="hljs-meta">#</span><span class="bash">进入onebot目录</span><br><br>mkdir cqhttp<br><span class="hljs-meta">#</span><span class="bash">添加go-cqhttp子目录</span><br><br>mkdir zbp<br><span class="hljs-meta">#</span><span class="bash">添加zerobot-plugin子目录</span><br></code></pre></td></tr></table></figure></li><li><p>下载解压可执行文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">去go-cqhttp的Releases复制符合系统版本的下载链接</span><br><span class="hljs-meta">#</span><span class="bash">在cqhttp文件夹下</span><br>wget https://github.com/Mrs4s/go-cqhttp/releases/download/v1.0.0-beta8-fix2/go-cqhttp_linux_amd64.tar.gz<br>tar -zxvf go-cqhttp_linux_amd64.tar.gz<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">zerobot-plugin</span><br>wget https://github.com/FloatTech/ZeroBot-Plugin/releases/download/v1.2.4-fix1/zbp_linux_amd64.tar.gz<br>tar -zxvf zbp_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure></li><li><p>目录结构如下，如果你觉得文件解压完的文件很多，可以删除<code>README.md</code>，<code>LICENSE</code>和压缩包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/home# tree onebot/<br>onebot/<br>├── cqhttp<br>│   ├── go-cqhttp<br>│   ├── go-cqhttp_linux_amd64.tar.gz<br>│   ├── LICENSE<br>│   └── README.md<br>└── zbp<br>    ├── LICENSE<br>    ├── README.md<br>    ├── zbp<br>    └── zbp_linux_amd64.tar.gz<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2.配置文件"></a>2.配置文件</h4><ul><li>进入cqhttp目录运行可执行文件<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:/home/onebot/cqhttp# ./go-cqhttp<br>未找到配置文件，正在为您生成配置文件中！<br>请选择你需要的通信方式:<br><span class="hljs-meta">&gt;</span><span class="bash"> 0: HTTP通信</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 1: 云函数服务</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 2: 正向 Websocket 通信</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 3: 反向 Websocket 通信</span><br><span class="hljs-meta">&gt;</span><span class="bash"> 4: pprof 性能分析服务器</span><br>请输入你需要的编号(0-9)，可输入多个，同一编号也可输入多个(如: 233)<br>您的选择是:2<br>默认配置文件已生成，请修改 config.yml 后重新启动!<br></code></pre></td></tr></table></figure><ul><li><p>目录中新生成了配置文件<code>config.yml</code></p></li><li><p>修改配置(正常情况下只需要修改uin，即QQ账号)</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">root@ubuntu:/home/onebot/cqhttp#</span> <span class="hljs-string">vim</span> <span class="hljs-string">config.yml</span><br><br><span class="hljs-comment"># go-cqhttp 默认配置文件</span><br>  <br><span class="hljs-attr">account:</span> <span class="hljs-comment"># 账号相关</span><br>  <span class="hljs-attr">uin:</span> <span class="hljs-number">12345678</span> <span class="hljs-comment"># QQ账号</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-comment"># 密码为空时使用扫码登录</span><br>  <span class="hljs-attr">encrypt:</span> <span class="hljs-literal">false</span>  <span class="hljs-comment"># 是否开启密码加密</span><br>  <span class="hljs-attr">status:</span> <span class="hljs-number">0</span>      <span class="hljs-comment"># 在线状态 请参考 https://docs.go-cqhttp.org/guide/config.html#在线状态</span><br>  <span class="hljs-attr">relogin:</span> <span class="hljs-comment"># 重连设置</span><br>    <span class="hljs-attr">delay:</span> <span class="hljs-number">3</span>   <span class="hljs-comment"># 首次重连延迟, 单位秒</span><br>    <span class="hljs-attr">interval:</span> <span class="hljs-number">3</span>   <span class="hljs-comment"># 重连间隔</span><br>    <span class="hljs-attr">max-times:</span> <span class="hljs-number">0</span>  <span class="hljs-comment"># 最大重连次数, 0为无限制</span><br><span class="hljs-string">...</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-运行程序"><a href="#3-运行程序" class="headerlink" title="3.运行程序"></a>3.运行程序</h4><ul><li><p>为保证断开终端后程序仍能运行，在Linux中要用到<a href="https://www.runoob.com/linux/linux-comm-screen.html">screen</a>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">只需要用到这几条:</span><br><br>screen -S 名称<br><span class="hljs-meta">#</span><span class="bash">新建窗口并进入，注意大写S</span><br><br>screen -ls<br><span class="hljs-meta">#</span><span class="bash">列出所有正在运行的窗口</span><br><br>screen -r 名称<br><span class="hljs-meta">#</span><span class="bash">恢复先前名为<span class="hljs-string">&quot;名称&quot;</span>的窗口</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">在窗口中运行好任务后，按<span class="hljs-string">&#x27;CTRL+A+D&#x27;</span>让窗口保持后台运行</span><br><span class="hljs-meta">#</span><span class="bash">在一个窗口中按<span class="hljs-string">&#x27;CTRL+D&#x27;</span>销毁窗口</span><br></code></pre></td></tr></table></figure></li><li><p>新建名为cqhttp的窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:~# screen -S cqhttp<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">跳转至新窗口</span><br><span class="hljs-meta">#</span><span class="bash">进入cqhttp目录运行程序./gocqhttp</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash">扫码登陆后按CTRL+A+D后台运行</span><br></code></pre></td></tr></table></figure></li><li><p>zerobot同理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">进入zerobot目录</span><br><span class="hljs-meta">#</span><span class="bash">zerobot的可执行文件为zbp</span><br><span class="hljs-meta">#</span><span class="bash">执行命令为./zbp</span><br></code></pre></td></tr></table></figure><ul><li>zbp运行指令拥有可选参数：./zbp [-h] [-t token] [-u url] [-n nickname] [-p prefix] [-d|w] [-g 监听地址:端口] [qq1 qq2 qq3 …] [&amp;]<ol><li><strong>-h</strong>: 显示帮助</li><li><strong>-t token</strong>: 设置<code>AccessToken</code>，默认为空</li><li><strong>-u url</strong>: 设置<code>Url</code>，默认为<code>ws://127.0.0.1:6700</code></li><li><strong>-n nickname</strong>: 设置默认昵称，默认为<code>椛椛</code></li><li><strong>-p prefix</strong>: 设置命令前缀，默认为<code>/</code></li><li><strong>-d|w</strong>: 开启 debug | warning 级别及以上日志输出</li><li><strong>-g 监听地址:端口</strong>: 在 http://监听地址:端口 上开启 <a href="https://github.com/FloatTech/bot-manager">webgui</a></li><li><strong>qqs</strong>: superusers 的 qq 号</li><li><strong>&amp;</strong>: 驻留在后台，必须放在最后，仅<code>Linux</code>下有效</li></ol></li><li>建议添加自己的主QQ作为zerobot的管理员</li></ul></li></ul><h4 id="4-成功部署"><a href="#4-成功部署" class="headerlink" title="4. 成功部署"></a>4. 成功部署</h4><ul><li><p>回到最初的终端，输入<code>screen -ls</code>即可看到当前正在运行的后台窗口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@ubuntu:~# screen -ls<br>There are screens on:<br>4339.zbp(01/27/2022 05:59:05 AM)(Detached)<br>4205.cqhttp(01/27/2022 05:52:56 AM)(Detached)<br>2 Sockets in /run/screen/S-root.<br></code></pre></td></tr></table></figure></li><li><p>用zerobot的管理员账号向机器人账号私聊发送：<code>/服务详情</code>即可查看具体用法</p></li></ul><h4 id="5-进阶操作"><a href="#5-进阶操作" class="headerlink" title="5.进阶操作"></a>5.进阶操作</h4><ul><li><p>在查看zerobot官方文档时，发现了一种在线编译的方式</p><ol><li>点击项目右上角 Fork ，并转跳到自己 Fork 的仓库</li><li>点击仓库上方的 Actions 按钮，确认使用 Actions</li><li>编辑 main.go 文件，内容按需修改</li><li>前往 Release 页面发布一个 Release，<code>tag</code>形如<code>v1.2.3</code>，以触发稳定版编译流程</li><li>点击 Actions 按钮，等待编译完成，回到 Release 页面下载编译好的文件</li><li>运行 OneBot 框架，并同时运行本插件</li></ol></li><li><p>go-cqhttp的启动命令也可以带参数</p><ul><li><p>快速启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./go-cqhttp faststart<br></code></pre></td></tr></table></figure></li></ul></li><li><p>关于账号被风控</p><p>建议查看此<a href="https://github.com/Mrs4s/go-cqhttp/issues/1320">issue</a></p></li></ul><h2 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h2><ul><li>在Linux环境下搭建，需要一定的Shell命令操作基础知识</li><li>如果你实在是懒，也可以直接去<a href="https://github.com/FloatTech/gocqzbp">FloatTech/gocqzbp</a>下载可执行文件，它是go-cqhttp与ZeroBot-Plugin的合体    <ul><li>文档请参考<a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a>，默认开启<a href="https://github.com/FloatTech/ZeroBot-Plugin">ZeroBot-Plugin</a>，无需任何额外操作即可使用。</li><li>除与<a href="https://github.com/Mrs4s/go-cqhttp">go-cqhttp</a>一致的参数外，还可以附加任意个数的qq号作为管理员<code>SuperUser</code></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>机器人</tag>
      
      <tag>QQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tasker-第二章-数据处理</title>
    <link href="/2022/01/03/Tasker-DataProcessing/"/>
    <url>/2022/01/03/Tasker-DataProcessing/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">    WARNING<br>    在学习并利用本功能前你应当清楚，即使是在上传真实数据的情况下，此行为仍可能违反了校规，或许会造成不好的后果！</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><img alt="" src="/img/Tasker-HttpRequest/mind.jpg"><h3 id="一、分析"><a href="#一、分析" class="headerlink" title="一、分析"></a>一、分析</h3><ul><li><p>在HttpRequest章节，我们了解到向服务器发送数据时主体中包含两个参数：学号、密码</p></li><li><p>我们以<code>%USERNAME</code>、<code>%PASSWORD</code>两个变量来代替手动输入</p><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;&quot;username&quot;:&quot;%USERNAME&quot;,&quot;password&quot;:&quot;%PASSWORD&quot;&#125;<br></code></pre></td></tr></table></figure></li></ul><p><img src="/img/Tasker-DataProcessing/value1.png"></p><p class="note note-warning">    注意<br>    在Tasker中变量名的标准形式为%XXX，一般情况下为大写，而小写也不违反命名规则，但小写的变量名只能被变量所在的“任务”读取，可以理解为局部变量</p><h3 id="二、获取Token"><a href="#二、获取Token" class="headerlink" title="二、获取Token"></a>二、获取Token</h3><ul><li><p>基本原理大致与前一篇Tasker博客相同</p></li><li><p>我们通过变量进行参数传入</p></li><li><p>整体如下：</p><p><img src="/img/Tasker-DataProcessing/all1.jpg"></p></li></ul><ul><li><p>选择<code>输入</code>任务</p></li><li><p>该任务传入参数会被存入<code>%input</code>变量中</p><p><img src="/img/Tasker-DataProcessing/input.jpg"></p></li></ul><ul><li><p>而我们需要同时传入两个参数<code>学号</code>、<code>密码</code>，一个<code>%input</code>肯定不行</p></li><li><p>这里就需要用到变量定义了</p><p><img src="/img/Tasker-DataProcessing/value2.jpg"></p></li><li><p><code>%PASSWORD</code>同理</p></li><li><p>传参完毕后，需要在<code>HttpRequest</code>中进行参数替换</p><p><strong>URL</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://apii.▇▇▇▇.edu.cn/v1/accounts/login/<br></code></pre></td></tr></table></figure><p><strong>头部</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json; charset=utf-8 <br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br <br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive <br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;&quot;username&quot;:&quot;%USERNAME&quot;,&quot;password&quot;:&quot;%PASSWORD&quot;&#125;<br></code></pre></td></tr></table></figure><p><strong>保存目录</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Download<span class="hljs-regexp">/token/</span>%USERNAME<br></code></pre></td></tr></table></figure></li><li><p>记得勾选<code>数据结构化</code></p></li></ul><p><img src="/img/Tasker-DataProcessing/http1.jpg"></p><ul><li><p>通过读取文件和Toast提示来测试是否成功获取服务器返回的文件</p></li><li><p>由于返回的<code>login</code>是JSON文件，暂定变量名为<code>%JSON</code></p></li><li><p>而JSON文件内容由若干的”键-值对“组成，可以直接通过<code>%JSON.token()</code>来获取token内容</p><p><strong>login文件</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;token&quot;</span>:<span class="hljs-string">&quot;这里是token的值&quot;</span>,<span class="hljs-attr">&quot;token_expiration_datetime&quot;</span>:<span class="hljs-string">&quot;2022-05-24 12:39:24&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Tasker-DataProcessing/read1.jpg"></p></li></ul><h3 id="三、编辑打卡任务"><a href="#三、编辑打卡任务" class="headerlink" title="三、编辑打卡任务"></a>三、编辑打卡任务</h3><ul><li><p>我们不需要每次打卡都获取一遍token，只需读取本地的login文件即可</p><p><img src="/img/Tasker-DataProcessing/all2.jpg"></p></li><li><p>读取文件的路径需要手动填写</p><p><strong>文件路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Download/token/学号/login<br></code></pre></td></tr></table></figure><p><img src="/img/Tasker-DataProcessing/read2.jpg"></p></li><li><p>事实上，在第一部分获取token时我们就已经将login文件中token的值存在了<code>%JSON</code>中</p></li><li><p>再次读取文件是为了防止手机重启而导致的Takser变量清空</p></li><li><p>此时，我们就可以用<code>%JSON.token()</code>来替换HttpRequest中JWT后的token值</p><p><strong>URL</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://apii.▇▇▇▇.edu.cn/v1/temperatures/<br></code></pre></td></tr></table></figure><p><strong>头部</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>JWT %JSON.token()<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;<br>    &quot;code_color&quot;: &quot;A&quot;,<br>    &quot;condition&quot;: &quot;A&quot;,<br>    &quot;contacted_health&quot;: &quot;&quot;,<br>    &quot;family_conditions&quot;: &quot;&quot;,<br>    &quot;high_risk_status&quot;: &quot;A&quot;,<br>    &quot;home_condition&quot;: &quot;A&quot;,<br>    &quot;is_contacted&quot;: false,<br>    &quot;stayed&quot;: false,<br>    &quot;stayed_contacted&quot;: false,<br>    &quot;submitted_to_haedu&quot;: false,<br>    &quot;vaccine_status&quot;: &quot;F&quot;,<br>    &quot;value&quot;: &quot;36.0&quot;,<br>    &quot;watched&quot;: false,<br>    &quot;watched_location&quot;: &quot;&quot;,<br>    &quot;contacted_health&quot;: &quot;&quot;,<br>    &quot;personid&quot;: &quot;&quot;,<br>    &quot;location&quot;: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;<br>    &quot;value&quot;: &quot;36.0&quot;,<br>    &quot;condition&quot;: &quot;A&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/Tasker-DataProcessing/http2.jpg"></p></li></ul><h3 id="四、结束"><a href="#四、结束" class="headerlink" title="四、结束"></a>四、结束</h3><ul><li>在Tasker配置文件中设置触发器后，打卡程序就能正常运行了</li><li>你甚至可以利用TaskerAppFactory生成应用程序</li></ul><h3 id="Tasker——带给你无限种可能"><a href="#Tasker——带给你无限种可能" class="headerlink" title="Tasker——带给你无限种可能"></a>Tasker——带给你无限种可能</h3><p>​            <strong>如果你有任何问题请在下面留言，我会收到邮件并及时回复你</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>网页</tag>
      
      <tag>Tasker</tag>
      
      <tag>自动化</tag>
      
      <tag>数据处理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>了解你的电脑</title>
    <link href="/2021/09/08/My-Laptop/"/>
    <url>/2021/09/08/My-Laptop/</url>
    
    <content type="html"><![CDATA[<h2 id="一、检查外观吧"><a href="#一、检查外观吧" class="headerlink" title="一、检查外观吧"></a>一、检查外观吧</h2><ol><li>检查电脑的ABCD面有无划痕，各种接口有无被用过的痕迹；特别微小的划痕可忽略（买电脑要把自己的品控拉低）</li><li>开箱时请做好记录</li></ol><p><img src="/img/My-Laptop/ABCD.jpg"></p><h2 id="二、插上电点亮"><a href="#二、插上电点亮" class="headerlink" title="二、插上电点亮"></a>二、插上电点亮</h2><ol><li><p>下一步…下一步…到联网的界面直接跳过（选择我没有网络连接），联网自动激活，网购电脑激活后不支持七天无理由</p><p>同时，初次进入系统不联网会更快</p></li><li><p>命名用户名时一定要是英文或数字，哪怕是一个字母（C:\Users\Administrator管理员）使用中文会出现很多问题</p></li></ol><h2 id="三、在？调试一下？"><a href="#三、在？调试一下？" class="headerlink" title="三、在？调试一下？"></a>三、在？调试一下？</h2><ol><li><p>调出你的“此电脑”，桌面右键-个性化-主题-<code>桌面图标设置</code>-勾选<code>计算机</code>-确定</p><p><img src="/img/My-Laptop/theme.jpg"></p></li><li><p>对着<code>此电脑</code>右键-属性-查看处理器和已安装RAM大小，对照你购买的版本参数检查</p></li><li><p>打开此电脑，一块512GB的硬盘一般会分C&amp;D两个区，当然加起来肯定不够512GB，毕竟硬盘生产厂商：1000MB＝1GB，而计算机中1GB=1024MB…还有系统的启动分区。</p><p><img src="/img/My-Laptop/disk.png"></p></li></ol><h2 id="四、可以插电重启咯！"><a href="#四、可以插电重启咯！" class="headerlink" title="四、可以插电重启咯！"></a>四、可以插电重启咯！</h2><ol><li><p>检查完毕：联网（插网线或者WiFi）重启</p></li><li><p>然后去设置-账户-登录Microsoft账户（强烈建议注册Microsoft账户好处很多）</p></li><li><p>在登录选项里-人脸 指纹 PIN看你的电脑支持哪一项就设置哪一项</p></li><li><p>（联网重启后电脑可能黑屏属正常，因为电脑联网会自动安装各种驱动程序）至此新电脑已经可以使用了</p></li></ol><h2 id="五、关于安装软件"><a href="#五、关于安装软件" class="headerlink" title="五、关于安装软件"></a>五、关于安装软件</h2><ol><li><p>只推荐官网下载，不要无脑下一步，不要一键安装，不要极速安装</p></li><li><p>选自定义安装（划重点）把安装位置选到D盘（建议在D盘新建一个Software文件夹用来放软件）</p></li><li><p>一定要看清楚<code>位置</code>和是否带一堆<code>垃圾软件</code></p></li><li><p>此外，请不要将自己的文件乱丢或丢在桌面上，请在非系统盘下新建目录，做好文件分类，清楚地记得自己的文件都放在哪，每个盘的文件夹都是什么</p></li></ol><h3 id="系统安全类"><a href="#系统安全类" class="headerlink" title="系统安全类"></a>系统安全类</h3><ol><li><p>球球你们了告别安全管家！Windows10自带的Defender（在设置-更新和安全-Windows安全中心）已经很厉害了，不需要再装安全软件来拖慢系统速度</p></li><li><p>如果你实在是不放心，那么请允许我向你推荐<a href="https://www.huorong.cn/">火绒</a>，它不会无故打扰你，只会偶尔告诉你：病毒库已自动更新</p></li></ol><h3 id="浏览器类"><a href="#浏览器类" class="headerlink" title="浏览器类"></a>浏览器类</h3><ol><li><p>不要360不要搜狗高速浏览器不要QQ浏览器…</p></li><li><p>Microsoft自带Edge非常好用，加上你的微软账户要是以后换了电脑浏览器的收藏和设置全都会自动同步</p></li><li><p>什么？你觉得不好用？那就去装Chrome（商店下载）或者Firefox<a href="https://www.mozilla.org/zh-CN/firefox/new/">（官网下载）</a></p></li><li><p>划重点：部分浏览器会出现搜索页面显示无网络问题，只需要去设置里选择百度 搜狗必应 等搜索引擎，此外浏览器默认的下载文件位置是C盘/下载，这个……在D盘新建一个文件夹，改到D盘！</p></li><li><p>扩展功能：Edge，Chrome和Firefox都可以装插件，如果你觉得主页太丑推荐插件：推荐Infinity标签页（我一直在用）更多功能性插件在浏览器的扩展里等待探索</p></li></ol><h3 id="文档办公类"><a href="#文档办公类" class="headerlink" title="文档办公类"></a>文档办公类</h3><ol><li><p>文档编辑类：有的电脑自带正版office全家桶只需要用微软账号激活</p></li><li><p>没有的话那自然是<del>WPS全家桶</del></p></li></ol><h3 id="解压软件"><a href="#解压软件" class="headerlink" title="解压软件"></a>解压软件</h3><ol><li><a href="https://www.win-rar.com/start.html?&L=0">WinRAR</a>和<a href="https://www.7-zip.org/">7-Zip</a>，前者免费版有弹窗广告后者无广告</li><li>新增<a href="https://cn.bandisoft.com/bandizip/">Bandizip</a>，六代版本原生无广告，七代版本不激活有广告</li></ol><h1 id="大概就是这些吧，以后有了还会再加"><a href="#大概就是这些吧，以后有了还会再加" class="headerlink" title="大概就是这些吧，以后有了还会再加"></a>大概就是这些吧，以后有了还会再加</h1>]]></content>
    
    
    
    <tags>
      
      <tag>硬件</tag>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tasker-第一篇-Http请求</title>
    <link href="/2021/07/27/Tasker-HttpRequest/"/>
    <url>/2021/07/27/Tasker-HttpRequest/</url>
    
    <content type="html"><![CDATA[<p class="note note-warning">    WARNING<br>    在学习并利用本功能前你应当清楚，即使是在上传真实数据的情况下，此行为仍可能违反了校规，或许会造成不好的后果！</p><p>​        #由于这是第一篇Tasker博客，首先将介绍Tasker</p><p>​        </p><p>​        #最后一次编辑于8月9日</p><h1 id="关于Tasker"><a href="#关于Tasker" class="headerlink" title="关于Tasker"></a>关于Tasker</h1><p>​        ——Total Automation for Android  </p><p>​        一次<del>上课</del>(划水)时偶然在<a href="https://hsiaofeng.com/">筱枫</a>的iPhone上了解到<code>快捷指令</code>这个软件(由于Android的开源可玩性极高，我至今未体验过ios🙄也许以后有机会)，被这种设定好以某种触发方式，自动执行指令的运作模式所吸引到。于是便开始寻找Android端是否有类似软件，很高兴——有且不止一个<a href="https://ifttt.com/">IFTTT</a>、<a href="https://tasker.joaoapps.com/">Tasker</a>……  </p><p>由于IFTTT的着重点在于各社交应用间的联动，可玩性没有Tasker高，这里选择后者作为方便生活的自动化工具。  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li>你可以在<a href="https://tasker.joaoapps.com/">Tasker for Android</a>找到老版本的安装包</li><li>也可以在<a href="https://play.google.com/store/apps/details?id=net.dinglisch.android.taskerm">Google Playstore</a>上购买$3.49或试用七天。</li><li>当然，出于学习的目的(<del>相信你不会商用</del>)我也为你准备了去除Google授权验证的<a href="https://wingchaos.space/img/Tasker-HttpRequest/Tasker_5.13.2_resigned.sigKill.apk">学习版</a></li></ul><p>——至此，介绍、安装部分结束。</p><h1 style="text-align:center;">注意：此方法已弃用（过于复杂）</h1> <h1 style="text-align:center;">但请先了解Tasker的工作方式</h1> <h1 style="text-align:center;">再查看DataProcessing以获取新的方法</h1> <h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><img alt="" src="/img/Tasker-HttpRequest/mind.jpg"><h3 id="一、了解打卡过程"><a href="#一、了解打卡过程" class="headerlink" title="一、了解打卡过程"></a>一、了解打卡过程</h3><p>​        打卡这一操作无非就是向服务器发送数据，要<del>截获</del>(获取，并未劫持)数据我们需要用到<a href="https://www.telerik.com/download/fiddler/fiddler4">Fiddler4</a>，这一过程称作<code>抓包</code></p><p>你可以理解为<a href="https://www.bilibili.com/video/BV1kW411c7Qm">窃听有线通话</a>的操作@罗兹</p><p><a href="#hsiaofeng">筱枫的抓包结果</a>  </p><p><strong>（由于系统做出调整，代码于8月9日更新）</strong></p><h3 id="二、模拟打卡操作"><a href="#二、模拟打卡操作" class="headerlink" title="二、模拟打卡操作"></a>二、模拟打卡操作</h3><p>​        在进行操作前，你应该对HTTP的几种请求方式有些许了解，这里我们用到了POST向服务器提交数据。</p><p>​        在新版的Tasker里，HTTP POST等操作被整合进了<code>HTTP Request</code>。</p><p>​        下一个Tasker教程中将使用<code>JSON文件分析</code>功能，可以简化寻找login文件的过程</p><p><strong>URL</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://apii.▇▇▇▇.edu.cn/v1/accounts/login/<br></code></pre></td></tr></table></figure><p><strong>头部</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json; charset=utf-8 <br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate, br <br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>keep-alive <br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;&quot;username&quot;:&quot;账号&quot;,&quot;password&quot;:&quot;密码&quot;&#125;<br></code></pre></td></tr></table></figure><h4 id="转到“任务”页面，新建任务"><a href="#转到“任务”页面，新建任务" class="headerlink" title="转到“任务”页面，新建任务"></a>转到“任务”页面，新建任务</h4><p><strong>新建HTTP Request操作，填入上方内容</strong></p><p><strong>输出目录填<code>Download/</code>其他默认</strong></p><img alt="" src="/img/Tasker-HttpRequest/token.jpg" width=50%><img alt="" src="/img/Tasker-HttpRequest/choice.jpg" width=50%><img alt="" src="/img/Tasker-HttpRequest/httprequest.jpg" width=50%><p><strong>如果一切正常（指：操作、内容填充正确）</strong>  </p><p><strong>点击左下角运行键，你不该看到（错误原因如图）</strong></p><img alt="" src="/img/Tasker-HttpRequest/gettoken.jpg" width=50%><p><strong>而是在任务前看到一个绿点，并可以在手机文件管理器中<code>Download/</code>文件夹找到一个名为<code>login</code>的json文件，把它以文本方式打开</strong></p>   <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<span class="hljs-attr">&quot;token&quot;</span>:<span class="hljs-string">&quot;复制文件中这个位置的token&quot;</span>,<span class="hljs-attr">&quot;token_expiration_datetime&quot;</span>:<span class="hljs-string">&quot;这里是有效期2022-02-02 10:17:25&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 style="text-align:center;">以上操作将在DataProcessing中改进</h1> <h4 id="开始模拟打卡，新建晨报打卡任务，依然选择HTTP-Request"><a href="#开始模拟打卡，新建晨报打卡任务，依然选择HTTP-Request" class="headerlink" title="开始模拟打卡，新建晨报打卡任务，依然选择HTTP Request"></a>开始模拟打卡，新建晨报打卡任务，依然选择HTTP Request</h4><p><strong>URL</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://apii.▇▇▇▇.edu.cn/v1/temperatures/<br></code></pre></td></tr></table></figure><p><strong>头部</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>JWT 粘贴你的token<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;<br>    &quot;code_color&quot;: &quot;A&quot;,<br>    &quot;condition&quot;: &quot;A&quot;,<br>    &quot;contacted_health&quot;: &quot;&quot;,<br>    &quot;family_conditions&quot;: &quot;&quot;,<br>    &quot;high_risk_status&quot;: &quot;A&quot;,<br>    &quot;home_condition&quot;: &quot;A&quot;,<br>    &quot;is_contacted&quot;: false,<br>    &quot;stayed&quot;: false,<br>    &quot;stayed_contacted&quot;: false,<br>    &quot;submitted_to_haedu&quot;: false,<br>    &quot;vaccine_status&quot;: &quot;F&quot;,<br>    &quot;value&quot;: &quot;36.0&quot;,<br>    &quot;watched&quot;: false,<br>    &quot;watched_location&quot;: &quot;&quot;,<br>    &quot;contacted_health&quot;: &quot;&quot;,<br>    &quot;personid&quot;: &quot;&quot;,<br>    &quot;location&quot;: &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>如图填入内容：</strong></p><img alt="" src="/img/Tasker-HttpRequest/morning.jpg" width=50%><p><strong>点击运行键测试，去微信小程序中查看晨报打卡是否多出一条</strong>  </p><img alt="" src="/img/Tasker-HttpRequest/test.jpg" width=50%><h4 id="新建午报打卡任务"><a href="#新建午报打卡任务" class="headerlink" title="新建午报打卡任务"></a>新建午报打卡任务</h4><p>​        <strong>午报只有URL和主体不同</strong></p><p><strong>URL</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">https://apii.▇▇▇▇.edu.cn/v1/noons/<br></code></pre></td></tr></table></figure><p><strong>主体</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http">&#123;<br>    &quot;value&quot;: &quot;36.0&quot;,<br>    &quot;condition&quot;: &quot;A&quot;<br>&#125;<br></code></pre></td></tr></table></figure><img alt="" src="/img/Tasker-HttpRequest/noon.jpg" width=50%><h3 id="三、定时触发操作"><a href="#三、定时触发操作" class="headerlink" title="三、定时触发操作"></a>三、定时触发操作</h3><p>​        <strong>在配置文件页面新建，选择“时间”，调整时间，点击返回选择链接“晨报打卡”任务，午报打卡同理。</strong></p><img alt="" src="/img/Tasker-HttpRequest/cause.jpg" width=50%><img alt="" src="/img/Tasker-HttpRequest/time.jpg" width=50%><img alt="" src="/img/Tasker-HttpRequest/done.jpg" width=50%><h3 id="至此你已经完成了Tasker自动化操作的设置"><a href="#至此你已经完成了Tasker自动化操作的设置" class="headerlink" title="至此你已经完成了Tasker自动化操作的设置"></a>至此你已经完成了Tasker自动化操作的设置</h3><p>​            <strong>它将在设定时间向服务器发送打卡请求，完成自动打卡。</strong>  </p><h3 id="来自枫茶舍的嵌套页面"><a href="#来自枫茶舍的嵌套页面" class="headerlink" title="来自枫茶舍的嵌套页面"></a><a id="hsiaofeng">来自枫茶舍的嵌套页面</a></h3><iframe src="https://hsiaofeng.com/archives/81.html" width="100%" height="500" name="topFrame" scrolling="yes"  noresize="noresize" frameborder="1" id="topFrame"></iframe><h3 id="四、补充内容"><a href="#四、补充内容" class="headerlink" title="四、补充内容"></a>四、补充内容</h3><ol><li><p>研究Tasker进行自动化打卡的过程，少不了<a href="https://hsiaofeng.com/">筱枫</a>的支持，再次感谢筱枫！😉</p></li><li><p>当然，如果你看完了仍然觉得——很复杂，我也为你写好了<a href="https://wingchaos.space/img/Tasker-HttpRequest/backup.%E6%94%B9xml">配置文件</a>(需要改下后缀xml，也更新了)</p></li><li><details>    <summary>配置文件的导入</summary>    点击Tasker主页右上角—数据—还原—用户本地备份<br>    点一下手机图标，找到Download文件夹-选择-backup.xml-确定</details></li><li><p>为了Tasker能正常运行，一些必要的权限是要给的，这点需要自己判断</p></li><li><p>由于Tasker需要在后台长时间运行，一些手机的电池优化选项可能会杀掉进程，对该应用的省电策略应选择“无限制”</p></li><li><p>如果只是用来打卡，不推荐你在主力机上安装Tasker；这就相当于你用大功率洗衣机只洗一件T恤，性能浪费过多。  </p><p>所以找一部旧手机扔在平稳安静的地方再合适不过了；你还可以将多余的手机卡分配给它，一旦它接收到了验证码，就会立即推送至你的主力机……</p></li></ol><h3 id="Tasker——带给你无限种可能"><a href="#Tasker——带给你无限种可能" class="headerlink" title="Tasker——带给你无限种可能"></a>Tasker——带给你无限种可能</h3><p>​            <strong>如果你有任何问题请在下面留言，我会收到邮件并及时回复你</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>网页</tag>
      
      <tag>抓包</tag>
      
      <tag>Tasker</tag>
      
      <tag>自动化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo学习内容</title>
    <link href="/2021/07/26/learn-hexo/"/>
    <url>/2021/07/26/learn-hexo/</url>
    
    <content type="html"><![CDATA[<p>以下是由Hexo生成的第一个网页，意在便于使用者查阅指令、跳转至官方Doc等<br>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>网页</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
